#include<iostream>
#include<queue>
#include<map>
#include<cstring>
#include<sstream>
#include<list>
#include<vector>
#include<algorithm>

using namespace std;

// vector<vector<int>> v;

// template<typename T>

// class Graph {
// public:

// 	map<T , list<pair<T , int>>> adjList;

// 	void addEdge(T u , T v , int edgeLength , bool bidir = true) {
// 		adjList[u].push_back({v , edgeLength});
// 		if (bidir == true)
// 			adjList[v].push_back({u , edgeLength});
// 	}

// 	void print() {
// 		for (auto row : adjList) {
// 			T node = row.first;
// 			cout << node << " -> ";

// 			for (auto nodePair : adjList[node]) {
// 				cout << nodePair.first << " <-> " << nodePair.second << " , ";
// 			}
// 			cout << endl;
// 		}
// 	}



// 	void dfsHelper(int node , map<int , bool> &visited , vector<int> &path) {
// 		visited[node] = true;
// 		path.push_back(node);

// 		for (auto nodePair : adjList[node]) {
// 			int neighbour = nodePair.first;
// 			if (!visited[neighbour]) {
// 				dfsHelper(neighbour , visited , path);
// 			}
// 		}

// 	}

// 	void DFS() {

// 		map<int , bool> visited;

// 		int component = 0;

// 		for (auto row : adjList) {
// 			int node = row.first;
// 			vector<int> path;
// 			if (!visited[node]) {
// 				dfsHelper(node , visited , path);
// 				v.push_back(path);
// 				component++;
// 			}

// 		}

// 		for (auto i : v) {
// 			for (auto j : i) {
// 				cout << j << " ";
// 			}
// 			cout << endl;
// 		}

// 		cout << "Components -> " << component << endl;

// 	}




// };

// void FloodFill(vector<int> v[] ,int N , int M , int i , int j) {
// 	if (i < 0 || j < 0 || i >= N || j >= M || v[i][j] != 1)
// 		return;

// 	v[i][j] = 2;

// 	FloodFill(v , N , M, i - 1 , j );
// 	FloodFill(v , N , M, i - 1 , j + 1 );
// 	FloodFill(v , N , M, i , j + 1);
// 	FloodFill(v , N , M, i + 1 , j + 1 );
// 	FloodFill(v , N , M, i + 1 , j );
// 	FloodFill(v , N , M, i + 1 , j - 1 );
// 	FloodFill(v , N , M, i , j - 1 );
// 	FloodFill(v , N , M, i - 1 , j - 1 );
// }




// int findIslands(vector<int> v[], int N, int M) {

//     int islands = 0;
//     for(int i = 0 ; i < N ; i++){
//         for(int j = 0 ;j < M ; j++){
//             if(v[i][j] == 1){
//             FloodFill(v , N , M , i , j);
//             islands++;
//             }

//         }
//     }


//     return islands;

// }


void dfsHelper(vector<vector<int>> arr , vector<vector<bool>> &visited , int i , int j) {
	if (i < 0 || j < 0 || i >= arr.size() || j >= arr[0].size() ||
	        visited[i][j] == true || arr[i][j] == 1) {
		return;
	}


	visited[i][j] = true;

	dfsHelper(arr , visited , i - 1 , j);
	dfsHelper(arr , visited , i , j - 1);
	dfsHelper(arr , visited , i + 1 , j);
	dfsHelper(arr , visited , i , j + 1);
}


int CountNumberOfIslands(vector<vector<int>> arr) {

	int n = arr.size() , m = arr[0].size();

	vector<vector<bool>> visited(n , vector<bool> (m));
	int component = 0;

	for (int i = 0 ; i < n ; i++) {
		for (int j = 0 ; j < m ; j++) {
			if (arr[i][j] == 0 && !visited[i][j]) {
				dfsHelper(arr , visited , i , j);
				component++;
			}
		}
	}

	return component;
}





int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt" , "r" , stdin);
	freopen("output.txt" , "w" , stdout);
#endif


	int n = 8, m = 5;

	vector< vector<int> > arr(n , vector<int> (m));
	for (int i = 0 ; i < n ; i++) {
		for (int j = 0 ; j < m ; j++) {
			cin >> arr[i][j];

		}
	}

	cout << CountNumberOfIslands(arr);





	return 0;
}
